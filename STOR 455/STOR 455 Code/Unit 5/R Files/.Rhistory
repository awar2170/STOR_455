library(Stat2Data)
data("Putts1")
head(Putts1)
# Use glm for different types of graphs
modPutt=glm(Made~Length,family=binomial,data=Putts1)
summary(modPutt)
B0 = summary(modPutt)$coef[1]
B1 = summary(modPutt)$coef[2]
plot(jitter(Made,amount=0.1)~Length,data=Putts1)
curve(exp(B0+B1*x)/(1+exp(B0+B1*x)),add=TRUE, col="red")
# This makes a proportion of success for the golf putts probabilities
# P(success)/Ntrials
Putts.table = table(Putts1$Made, Putts1$Length)
Putts.table
library(Stat2Data)
data("Putts1")
head(Putts1)
# Use glm for different types of graphs
modPutt=glm(Made~Length,family=binomial,data=Putts1)
summary(modPutt)
B0 = summary(modPutt)$coef[1]
B1 = summary(modPutt)$coef[2]
plot(jitter(Made,amount=0.1)~Length,data=Putts1)
curve(exp(B0+B1*x)/(1+exp(B0+B1*x)),add=TRUE, col="red")
# This makes a table so we can then make the proportion of success for the golf putts probabilities
Putts.table = table(Putts1$Made, Putts1$Length)
Putts.table
# Proportion made for each distance
# takes the probabilities from the putts table and see the proportion for each distance so it's the total for distance 3
# P(success)/Ntrials
p.hat = as.vector(Putts.table[2,]/colSums(Putts.table))
p.hat
logit = function(B0, B1, x)
{
exp(B0+B1*x)/(1+exp(B0+B1*x))
}
pi.hat=0
for(i in 3:7)
{
pi.hat[i-2] = logit(B0, B1, i)
}
pi.hat
Putts = data.frame(
"Length" = c(3:7),
"p.hat"  = p.hat,
"pi.hat" = pi.hat)
head(Putts)
plot(p.hat~Length,ylim=c(0,1), xlim=c(0,12), data=Putts)
#
curve(logit(B0, B1, x),add=TRUE, col="red")
library(readr)
library(bestglm)
library(Stat2Data)
insurance <- read_csv("https://raw.githubusercontent.com/JA-McLean/STOR455/master/data/insurance.csv")
data(MedGPA)
head(MedGPA)
MedGPA.1 = within(MedGPA, {Accept = NULL}) #delete Accept variable
head(MedGPA.1)
MedGPA.2 = MedGPA.1[,c(2:10,1)] #reorder columns with response last
#bestglm for Model Selection
head(MedGPA.2)
bestglm(MedGPA.2, family=binomial)
MedGPA.2.bestglm = bestglm(MedGPA.2, family=binomial)
MedGPA.2.bestglm$BestModels
data("ICU")
head(ICU)
#Requirements to use bestglm()
#1. Only the response and possible predictor variables should be within the dataframe
ICU.1 <- within(ICU, {ID = NULL}) #delete ID variable
#delete ID variable
# WHy do we delete teh ID Variable? We probably don't need it because each row = the incident number
#2. The response variable must be the last column in the dataframe.
#reorder columns with response last; column 1 is now the survived column because the ID column was deleted.
ICU.2 = ICU.1[,c(2:8,1)] #reorder columns with response last
# AgeGroup is Treated as Quantitative
head(ICU.2)
bestglm(ICU.2, family=binomial)
# THis tells me that teh best variable to predict survived is Emergency
bestglm(ICU.2, family=binomial)$BestModels
# The criteria doesn't change very much between teh first three models
# Criteria is teh BIC; we want this to be low
#THe data is teaching Age group as a numerical verabiel, we need to cahnge it to a cateorical variable if we want to look at each age group
ICU_factor_AgeGroup = ICU.2
ICU_factor_AgeGroup$AgeGroup = factor(ICU_factor_AgeGroup$AgeGroup)
head(ICU_factor_AgeGroup)
bestglm(ICU_factor_AgeGroup, family=binomial)
ICU_factor_AgeGroup_bestglm = bestglm(ICU_factor_AgeGroup, family=binomial)
ICU_factor_AgeGroup_bestglm$BestModels
#Requirements to use bestglm()
# 3. Create dummy variables for non binary categorical variables.
ICU.2$AgeGroup2 = ifelse(ICU.2$AgeGroup==2,1,0)
ICU.2$AgeGroup3 = ifelse(ICU.2$AgeGroup==3,1,0)
ICU.3 <- within(ICU.2, {AgeGroup = NULL}) #delete AgeGroup variable
ICU.4 = ICU.3[,c(1:6,8,9,7)] #reorder columns with response last
head(ICU.4)
bestglm(ICU.4, family=binomial)
# Comparing Models by BIC
ICU.4.bestglm = bestglm(ICU.4, family=binomial)
ICU.4.bestglm$BestModels
emplogitplot2(Survive~Age+factor(Emergency), data=ICU.4, ngroups=10)
ICU.4$EMAGE = ICU.4$Age*ICU.4$Emergency
head(ICU.4)
ICU.5 = ICU.4[,c(1:8,10,9)] # THis moves surive to teh end of the columns, so that wecan keep doing the code with bestgml.
head(ICU.5)
x = bestglm(ICU.5, family=binomial)
x$BestModels
head(insurance)
Currency_Convert <- function(Field){
Field <- as.numeric(gsub("\\$|,","", Field))
}
#Change factors to numbers
insurance$HOME_VAL_num = Currency_Convert(insurance$HOME_VAL)
insurance$INCOME_num = Currency_Convert(insurance$INCOME)
insurance$BLUEBOOK_num = Currency_Convert(insurance$BLUEBOOK)
insurance$OLDCLAIM_num = Currency_Convert(insurance$OLDCLAIM)
#remove unneeded variables
insurance.1 = within(insurance,
{INDEX = NULL
TARGET_AMT = NULL
HOME_VAL = NULL
INCOME = NULL
BLUEBOOK = NULL
OLDCLAIM = NULL})
head(insurance.1)
insurance.2 = insurance.1[,c(2:24,1)]
head(insurance.2)
#Sad trombone
insurance.2 = as.data.frame(insurance.2)
bestglm(insurance.2, family=binomial)
library(dplyr)
insurance.2.1 = insurance.2 %>% mutate_if(is.character, factor)
head(insurance.2.1)
#Sadder trombone
insurance.2.1 = as.data.frame(insurance.2.1)
bestglm(insurance.2.1, family=binomial)
library(MASS)
