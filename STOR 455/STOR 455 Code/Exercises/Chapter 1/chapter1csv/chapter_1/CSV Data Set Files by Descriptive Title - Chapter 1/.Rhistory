year
names(world.pop) <- year
names(world.pop)
world.pop
my.summary <- function(x){
s.out <- sum(x)
l.out <- length(x)
m.out <- s.out/l.out
out <- c(s.out, l.out, m.out)
names(out) <- c("sum", "length", "mean")
return(out)}
z <- 1:10
my.summary(z)
s.out
setwd("~/")
setwd("~/")
load("~/.RData")
get.wd()
getwd()
summary(world.pop)
ls()
help(save.image)
save(world.pop, file:C:/Users/adeve/Desktop )
help(source)
# Upload Data into R
rm(list=ls(all=TRUE))
# Math
5+7
5+7, 7-2
#multiplcation
5*7
#Division
9/3
#exponent
7^5
#squareroot
sqrt(2)
sqrt(4)
SQRT(4)
object1 <- 2
Object1 <- 3
rm(list=ls(TRUE))
rm(list=ls(all=TRUE))
object <- 1
object2 -> 2
rm(list=ls(all=TRUE))
five <- 5
ten <- 10
five = ten
five <- 5
ten <- 10
five = ten
# the equal function
five <- 5
ten <- 10
five == ten
five == ten
five == five
five === ten
five === five
rm(list=ls(all=TRUE))
([(0)])
# Upload Data into R
rm(list=ls(all=TRUE))
obj_a <- 334
obj_b <- 9637
obj_c <- "puppy"
obj_a * obj_c
obj_a * obj_b <- obj_d
obj_d <- obj_a * obj_b
obj_d
rm(list-ls(all=TRUE))
rm(list=ls(all=TRUE))
total_reg <- c(157, 325, 263, 379, 55)
dem_reg <- c(32, 150, 134, 213, 40)
rep_reg <- c(68, 100, 120, 137, 10)
school_vector <- c("Duke", "UNC", "NC State", "NC Central", "Wake Forest")
names(total_reg) <- school_vector #I'm trying to name what is in the parentheses
school_vector
total_dem <- sum(dem_reg)
total_dem
total_rep <- sum(rep_reg)
total_rep
numbers <- total_dem - total_rep
numbers
dem_reg[2] <- 157
dem_reg
dem_reg
total_reg
public_reg_total <- total_reg
voter.matrix <- cbind(voter.matrix, ___) # Note that we are overwriting "voter.matrix" with itself PLUS other things.
total_reg
public_reg_total <- total_reg
total_reg
total_reg
public_reg_total <- total_reg[2:4]
public_reg_total
total_reg
total_reg
private_reg_total <- total_reg[1, 5]
private_reg_total
private_reg_total <- total_reg[1,5]
private_reg_total <- total_reg[c(1,5)]
private_reg_total
public <- c(public_reg_total = TRUE, private_reg_total = FALSE)
public
public <- c(total_reg[2:4] = TRUE, total_reg[c(1,5)] = FALSE)
public
public <- c(total_reg[2:4] = TRUE, total_reg[c(1,5)] = FALSE)
public_reg_total
public <- c(total_reg[2:4] = TRUE, total_reg[c(1,5)] = FALSE)
public <- c(total_reg[c(2:4)] = TRUE, total_reg[c(1,5)] = FALSE)
public_reg_total
public <- c(public_reg_total == TRUE, private_reg_total == FALSE)
public
public <- c(public_reg_total == TRUE + private_reg_total == FALSE)
total_reg
private_reg_total
public <- c(FALSE, TRUE, TRUE, TRUE, FALSE)
public
sum(private_reg_total)
private_reg_total <- sum(total_reg[c(1,5)])
private_reg_total
public_reg_total <- sum(total_reg[2:4])
public_reg_total
public <- c(FALSE, TRUE, TRUE, TRUE, FALSE)
public
dem_reg
dem_reg
school_vector
public <- c(FALSE, TRUE, TRUE, TRUE, FALSE)
pub_reg_r <- sum(rep_reg[public])
pub_reg_d <- sum(dem_reg[public])
pub_reg_r
pub_reg_r <-
pub_reg_d <- dem_reg[public]
pub_reg_d
pub_reg_r <- rep_reg[public]
priv_reg_r <- rep_reg[!public]
priv_reg_r
pub_reg_r <- sum(rep_reg[public])
pub_reg_r
were registered total at each campus. Write your code below.
total_reg <- c(157, 325, 263, 379, 55)
# 2. Create 2 vectors called *dem_reg* and *rep_reg*: each should list how many of each party were registered at each campus. Write your code below.
dem_reg <- c(32, 150, 134, 213, 40)
rep_reg <- c(68, 100, 120, 137, 10)
# 3. Create a vector called *school_vector* with the names of the colleges (in the same order you entered the info in above). It's ok to use abbreviations if you prefer.
school_vector <- c("Duke", "UNC", "NC State", "NC Central", "Wake Forest")
# 4. Assign these names to each of your three voter reigstration vectors. Then, print out each vector to make sure this all worked.
names(total_reg) <- school_vector #I'm trying to name what is in the parentheses
school_vector
# 5. For each of the party vectors (dem_reg and rep_reg), write a command to calculate the total number of each party registered across all schools. After the second command (on the same line), write a comment stating whether more Democrats or Republicans were registered total.
total_dem <- sum(dem_reg)
total_dem
total_rep <- sum(rep_reg)
total_rep
numbers <- total_dem - total_rep
numbers
# There are 134 more democrats registered than republicans.
# 6. Oops! Someone in your office says they accidentally mis-recorded the total number of Democrats registered at UNC. It should be 157, not 150. Below, write a command to correct just this element of dem_reg (Don't recreate the whole vector, use your indexing skills!).
dem_reg[2] <- 157
dem_reg
# 7. Write a command that prints the dem_reg vector on the screen, to make sure your correction worked.
dem_reg
# 8. Below, write a command that calculates how many voters were registered total at public universities (so, not Duke or Wake Forest).  Do this by selecting parts of the total_reg vector numerically. Store the number in an object called *public_reg_total*.
total_reg
public_reg_total <- sum(total_reg[2:4])
public_reg_total #967
# 9. Now, write a command that calculates how many voters were registered at private universities. Store this number in an object called *private_reg_total*. This time, select the appropriate vector elements by referencing the school names.
total_reg
private_reg_total <- sum(total_reg[c(1,5)]) # Get rid of "sum" to see the individual total_reg for the private schools
private_reg_total #212
# 10. Now, create a Boolean vector with five elements that are TRUE for public universities, and FALSE for private universities. Store this vector in an object called *public*.
public <- c(FALSE, TRUE, TRUE, TRUE, FALSE) # Here we defined to R what is public and what is private, by TRUE and FALSE.
public
# 11. Now, use the vector you made to select the elements of dem_reg and rep_reg that correspond to public universities, and add up the total number of each party registered in those universities. Store this number in the object *pub_reg_r* and *pub_reg_d*.
pub_reg_r <- rep_reg[public] # By using the public vector, we are asking R to spit out all of the republican results for the public schools only.
pub_reg_d <- dem_reg[public] # By using the public vector, we are asking R to spit out all of the DEMOCRATIC results for the public schools only.
pub_reg_d
priv_reg_r <- rep_reg[!public] #This should give us the private school registered REPUBLICANS.
priv_reg_r
# TO find the sum of each, put the dudes in sum(function)
pub_reg_r <- sum(rep_reg[public])
pub_reg_r # repeat this for the other results as well
############## MATRICES ############
voter.matrix <- c(dem_reg, rep_reg, total_reg)
voter.matrix
voter.matrix <- cbind(dem_reg, rep_reg, total_reg)
voter.matrix
ind_reg <- c(total_reg - dem_reg - rep_reg)
ind_reg
voter.matrix <- cbind(voter.matrix, ind_reg) # Note that we are overwriting "voter.matrix" with itself PLUS other things.
voter.matrix
names(total_reg) <- "Total Registered"
names(dem_reg) <- "Democrats"
name(rep_reg) <- "Republicans"
names(rep_reg) <- "Republicans"
names(ind_reg) <- "Independents"
voter.matrix
reg.names <- c("Democrats", "Republicans", "Total Registered", "Independents")
colnames(voter.matrix) <- reg.names
voter.matrix
frac_I <- c(ind_reg/total_reg)
frac_I
frac_I <- c((ind_reg/total_reg)*100)
frac_I
voter.matrix <- cbind(voter.matrix, frac_I)
voter.matrix
frac_D <- c((ind_reg/dem_reg)*100)
frac_R <- c((ind_reg/rep_reg)*100)
voter.matrix <- cbind(voter.matrix, frac_D, frac_R)
voter.matrix
mean(voter.matrix[,"frac_D"]) # 0.497
mean(voter.matrix[,"frac_R"])
mean(voter.matrix[,"frac_I"])
50-48.2
50-48.2 == 1.8
number <- c(50-48.2)
number == 1.8
1.8 == 1.8
class(number)
class(1.8)
class(50-48.2)
number == number
50-48.2 == 50-48.2
1.8 == "1.8"
50-48.2 == "1.8"
rm(list=ls()) # Let's start with an empty workspace.
50-48.2
50-48.2 == 1.8
number <- c(50-48.2)
number == 1.8
1.8 == 1.8
50-48.2 == 50-48.2
1.8 == "1.8"
50-48.2 == "1.8"
# paste() is just a way to combine a few objects into a single character object
lyrics <- paste("I'm", "a Tar", "Heel born")
lyrics
#for each element "i" in object "1:9",
# For looks are more common in social sciences
# print out element "i"
for (i in 1:9) {
print(i)
}
#for each element "i" in object "1:9",
# For looks are more common in social sciences
# print out element "i"
for (i in 1:9) {
print(i)
}
1:9
for(funny in 1:9){
print(funny)
}
print(paste("the value of x is", x))
## While Loop ##
x <- 1
while (x < 10) {
print(paste("the value of x is", x))
} # This tells R to evaluate a TRUE oR FALSE
sum(3(3+1) + 4(4+1) + 5(5+1))
P <- sum(3(3+1) + 4(4+1) + 5(5+1))
P <- sum(3(3+1)+4(4+1)+5(5+1))
(3(3+1)+4(4+1)+5(5+1))
(3(3+1)+4(4+1)+5(5+1))
sum(3(3+1)+4(4+1)+5(5+1))
3(3+1)+4(4+1)+5(5+1)
3(3+1)
"3(3+1)+4(4+1)+5(5+1)"
sum("3(3+1)+4(4+1)+5(5+1)")
3*(3+1)
sum(3*(3+1)+4*(4+1)+5*(5+1))
9-(4*1^2)
sum(9-(4*1^2) + 9-(4*2^2)
sum(9-(4*1^2) + 9-(4*2^2))
sum(9-(4*1^2)+9-(4*2^2))
(2*1+3)*(3-2*1)
sum((2*1+3)*(3-2*1)+(2*2+3)*(3-2*2))
sum(((2*1+3)*(3-2*1))+((2*2+3)*(3-2*2))
sum(((2*1+3)*(3-2*1))+((2*2+3)*(3-2*2))
sum(((2*1+3)*(3-2*1))+((2*2+3)*(3-2*2))
sum(((2*1+3)*(3-2*1))+((2*2+3)*(3-2*2))
sum(((2*1+3)*(3-2*1))+((2*2+3)*(3-2*2))
sum(((2*1+3)*(3-2*1))+((2*2+3)*(3-2*2))
sum((2*1+3)*(3-2*1))+((2*2+3)*(3-2*2))
sum(9-(4*1^2)+9-(4*2^2))
(2*2+3)*(3-2*2)
x = 1:100
i = x
sum(i^2)
i = 2:1000
sum(sqrt((i^3)-6)
sum(sqrt((i^3)-6))
sum(sqrt((i^3)-6))
sum(sqrt((i^3)-6))
k = 1:100
sum(1/k)
k = 1:100
sum(1/(k^2))
i= 0:3
sum((i+1)*(-1)^i)
i = 2:4
j = i:2i
x = 2:4
j = x:2x
j = x:(2*(x))
j = x:2*x
j = x:(2*x)
x = 2:4
j = x:(2*x)
j = x:x*2
j = x:(x*2)
x = 2:4
y = 2*x
j = x:y
x = 2:4
y = 2*x
j = x:y
sum((x^2)-2xy)
sum((x^2)-2*x*y)
x = 1:4
sum(2*x+1)
x = 1:4
sum(2*x+1)
y = 4
y + ((2*y)*((y+1)/2))
x = 1:3
sum(2*x+1)
y = 3
y + ((2*y)*((y+1)/2))
x = 1:4
sum(x*(x+1))
x = 1:3
sum(x*(x+1))
x = 1:4
sum(x*(x+1))
n = 4
((n*(n+1))/2)*(1+((n(n+1))/2))
((n*(n+1))/2)*(1+((n*(n+1))/2))
n = 4
((2*(n*(n+1))) + ((n*(n+1))*(n*(n+1))))/4
n = 4
((n*(n+1)*(2n+1)) + (3*n*(n+1)))/6
((n*(n+1)*(2*n+1)) + (3*n*(n+1)))/6
n = 3
((n*(n+1)*(2*n+1)) + (3*n*(n+1)))/6
x = 1:4
j = 1:3
sum(x + j^2)
x = 1:4
sum(x+((x+1^1)+(x+2^2)+(x+3^2)))
x = 1:4
sum(4*x+14)
x = 2:4
2x
2*x
y = 2*x
x = 2:4
y = 2*x
x = 2:4
((x^2)-2*x(((x^2)-2*x*4)+((x^2)-2*x*6)+((x^2)-2*x*8))
sum(((x^2)-2*x(((x^2)-2*x*4)+((x^2)-2*x*6)+((x^2)-2*x*8)))
sum(((x^2)-2*x*(((x^2)-2*x*4)+((x^2)-2*x*6)+((x^2)-2*x*8)))
sum(((x^2)-2*x*(((x^2)-2*x*4)+((x^2)-2*x*6)+((x^2)-2*x*8)))
sum((x^2)-2*x*(((x^2)-2*x*4)+((x^2)-2*x*6)+((x^2)-2*x*8)))
x = 1:4
sum((-1)^x
x = 1:4
sum((-1)^x)
x = 1:4
sum((-1)^x)
-1^2
-1^3
-1^4
x = 0:3
sum((x+1)*((-1)^x))
2^3
2^4
2^5
x = 2:4
y = 2x
y = 2*x
sum((x^2)-2*x*y)
390625*5
5*5*4*4*3*3
67+75+86-(96+92+97)+99
1/2((5/2)+1
1/2*((5/2))+1
1/2*((5/2)+1)
x <- 1
y <- 1.75
1/2*((x)+y)
x <- 1.75
y <- 1.375
1/2*(x+y)
x <- 1.375
y <- 1.5625
1/2*(x+y)
x <- 1.5625
y <- 1.46875
1/2*(x+y)
x <- 1.46875
y <- 1.515625
1/2*(x+y)
x <- 1.515625
y <- 1.492188
1/2*(x+y)
3/2+(-1/2)^2
3/2+(-1/2)^0
k <- 1:5
k <- 1:5
sum(k*(k+1))
library(MASS)
data()
```{r}
Test <- x
install.packages("installr")
library(installr)
updateR()
leaf <-read.csv("ex01-15LeafW")
rm(list = ls())
setwd("C:/Users/adeve/Desktop/STOR 455 Code/Exercises/Chapter 1")
leaf <-read.csv("ex01-15LeafW")
leaf <-read.csv("ex01-15LeafW.csv")
# POLI 281 Homework 4
# Name: Alyssa Warnock
rm(list = ls())
setwd("C:/Users/adeve/Desktop/STOR 455 Code/Exercises/Chapter 1")
leaf <-read.csv("ex01-15LeafW.csv")
# Fit the regression of Width on Year
head(leaf)
# Fit the regression of Width on Year
names(leaf)
fit1 <- lm(Width ~ Year, data =  leaf)
fit1
abline(fit1)
summary(fit1)
abline(fit1)
plot(fit1)
plot(fit1)
rm(list = ls())
setwd("C:/Users/adeve/Desktop/STOR 455 Code/Exercises/Chapter 1")
leaf <-read.csv("ex01-15LeafW.csv")
# Fit the regression of Width on Year
names(leaf)
fit1 <- lm(Width ~ Year, data =  leaf)
fit1
plot(fit1, 1:2)
# Year is teh year the sample was collected
# y = -0.01756x+37.72309
-0.01756*(1966)+37.72309
#### 1.17 ####
setwd("C:/Users/adeve/Desktop/Chapel Hill/Fall21/STOR 455/STOR 455 Code/Exercises/Chapter 1/chapter1csv/chapter_1/CSV Data Set Files by Descriptive Title - Chapter 1")
faces <- read.csv("Faces.csv")
#Grip = measured in kg
fit2 <- lm(MaxGripStrength~Attractive, faces)
fit2
# y = 4.705x+36.160
# Attractiveness in this context is how good looking a female college student percieves the 38 male subjects in this experiment
# Predict
predict <- 4.705*(3)+36.160
predict2
#### 1.19 ####
cereal <- read.csv("Cereal.csv")
names(cereal)
fit3 <- lm(Calories~Sugar, cereal)
fit3
# line: y = 2.481x + 87.428
plot(fit3)
2.481*(10)+87.428
#112.238 calories
x <- (110-87.428)/2.481
x
x-1
# The residual is 8.097944
# Based on this test, it seems a little off
fit5 <- lm(Calories~Sugar, cereal)
#### 1.23 ####
sparrow <- read.csv("Sparrow")
#### 1.17 ####
setwd("C:/Users/adeve/Desktop/Chapel Hill/Fall21/STOR 455/STOR 455 Code/Exercises/Chapter 1/chapter1csv/chapter_1/CSV Data Set Files by Descriptive Title - Chapter 1")
#### 1.23 ####
sparrow <- read.csv("Sparrows")
#### 1.23 ####
sparrow <- read.csv("Sparrow")
#### 1.23 ####
sparrow <- read.csv("Sparrows")
#### 1.23 ####
sparrow <- read.csv("Sparrows.csv")
fit5 <- lm(sparrow$Weight~sparrow$WingLength, sparrow)
fit5
plot(Weight~WingLength, sparrow)
abline(sparrow)
plot(Weight~WingLength, sparrow)
abline(sparrow)
fit6 <- plot(Weight~WingLength, sparrow)
abline(fit6)
abline(plot(Weight~WingLength, sparrow))
hist(sparrow$residuals)
abline(plot(Weight~WingLength, sparrow))
abline(fit6)
fit6 <- plot(Weight~WingLength, sparrow)
abline(fit6)
ead.csv("Sparrows.csv")
fit5 <- lm(sparrow$Weight~sparrow$WingLength, sparrow)
abline(fit5)
fit5 <- lm(sparrow$Weight~sparrow$WingLength, sparrow)
abline(fit5)
hist(sparrow$residuals)
residuals(sparrow)
