---
title: "STOR 455 Class 3 R Notebook"
output:
pdf_document: default
html_notebook: default
---
```{r message=FALSE, warning=FALSE}
# message=FALSE, warning=FALSE supress warnings and messages from appearing in knitted html
library(readr)
DistanceHome <- read_csv("https://raw.githubusercontent.com/JA-McLean/STOR455/master/data/DistanceHome.csv")
# If notebook and csv file are saved in the same folder
# DistanceHome <- read_csv("DistanceHome.csv")
Domestic=subset(DistanceHome,Distance<250)
```
#### Class Notes ####
# Using 1 quant var to predict another; does a line fit that data?
# In practice, things aren't going to look super well; we also nee to see "Does a line not fit it well and it's still okay to use the linear process?"
# Simple Linear Model
## Y = B0 + B1X + E ( Response = INtercept + Slope(predictor) + Error)
# Scatter plot in R;
# Note: Clear your environment frequently; you can use code or you can use the broom button in the global enervionment tab
```{r}
#Sets randomization
set.seed(455001)
#Sample of 99 values from a Normal distribution; mean=0; sd=1; sorted ascending
x = sort(rnorm(99,0,1))
hist(x)
#list of integers 1 through 99.
y = c(1:99)
#z-scores of dataset of 99 values if perfectly normally distributed
normy = qnorm(y/100)
plot(x~normy)
abline(0,1)
```
# Want to do X - Y Axis
plot(Distance~Hours, Domestic) # Cna doa lot of things; depends on teh data we give it; we want to give it VERTICAL AXIS ~ HORIZONTAL AXIS
# Want to do X - Y Axis
plot(Distance~Hours, Domestic) # Cna doa lot of things; depends on teh data we give it; we want to give it VERTICAL AXIS ~ HORIZONTAL AXIS, Dataset
Domestic=subset(DistanceHome,Distance<250)
Domestic=subset(DistanceHome,Distance<250)
plot(Distance~Hours, Domestic)
Domestic=subset(DistanceHome,Distance<250)
Domestic=subset(DistanceHome,Distance<250)
lm(Distance!Hours, data = Domestic)
Domestic=subset(DistanceHome,Distance<250)
lm(Distance~Hours, data = Domestic)
mod1 <- lm(Distance~Hours, data = Domestic) #ab line, then will overlap plots
plot(Distance~Hours, data = Domestic)
abline(mod1)
mod1 <- lm(Distance~Hours, data = Domestic) #ab line, then will overlap plots
mod1 <- lm(Distance~Hours, data = Domestic) #ab line, then will overlap plots
plot(Distance~Hours, data = Domestic)
mod1 <- lm(Distance~Hours, data = Domestic) #ab line, then will overlap plots
plot(Distance~Hours, data = Domestic) # Makes the scatter plot
abline(mod1) #Adds the line to the scatter plot
#### Summary Linear stats ####
summary(mod1)
```{r}
#Sets randomization
set.seed(455001)
Linear stats ####
summary(mod1)
#### Summary Linear stats ####
summary(mod1) # Gives you an overview
## Chunks are useful if you have a large set of code and only want to run one part of it; the ### Divisions help show sections of a whole that need to runa ll togtehr
mod1$residuals
#### Summary Linear stats ####
summary(mod1) # Gives you an overview
# Chunks are useful if you have a large set of code and only want to run one part of it; the ### Divisions help show sections of a whole that need to runa ll togtehr
mod1$residuals
mod1$fitted.values
#### Summary Linear stats ####
summary(mod1) # Gives you an overview
# Chunks are useful if you have a large set of code and only want to run one part of it; the ### Divisions help show sections of a whole that need to runa ll togtehr
mod1$residuals
mod1$fitted.values
# Look at the above because we want to make a pplot against the fitted values; to see difference
plot(mod1$residuals~mod1$fitted.values)
# A hor line at 0 = regression line; the vertical distance = teh vertal distance when it had a different slope
# HOw to put a line into teh groaph
abline(0,0) # Intercept of 0, and slope of 0)
```{r}
#Sets randomization
set.seed(455001)
#### How to test if residuals are normal ####
# Does teh historgram look like a bellcurve shape or not?
# It's useful if it's NOT a bell curve shape
# use teh hist finction
hist(mod1$residuals)
#### How to test if residuals are normal ####
# Does teh historgram look like a bellcurve shape or not?
# It's useful if it's NOT a bell curve shape
# use teh hist finction
hist(mod1$residuals)
# Shows that we defintiely have a skew; the two points below a line are wehre we have teh neg residuals
## ALSO Could use a NORMAL QUANTILE PLOT
qqnorm(mod1$residuals)
#### How to test if residuals are normal ####
# Does teh historgram look like a bellcurve shape or not?
# It's useful if it's NOT a bell curve shape
# use teh hist finction
hist(mod1$residuals)
# Shows that we defintiely have a skew; the two points below a line are wehre we have teh neg residuals
## ALSO Could use a NORMAL QUANTILE PLOT
qqnorm(mod1$residuals)
qqline(mod1$residuals)
#Sets randomization
set.seed(455001) # THis will give us the same random number table
#Sample of 99 values from a Normal distribution; mean=0; sd=1; sorted ascending
x = sort(rnorm(99,0,1)) # Takes 99 values from a norm dist that has a mean of 0 and a std of 1; from a normal dis and how non norm would it be by chance?
hist(x)
hist(x)
set.seed(455001) # THis will give us the same random number table
#Sample of 99 values from a Normal distribution; mean=0; sd=1; sorted ascending
x = sort(rnorm(99,0,1)) # Takes 99 values from a norm dist that has a mean of 0 and a std of 1; from a normal dis and how non norm would it be by chance?
hist(x)
set.seed(455001) # THis will give us the same random number table
#Sample of 99 values from a Normal distribution; mean=0; sd=1; sorted ascending
x = sort(rnorm(99,0,1)) # Takes 99 values from a norm dist that has a mean of 0 and a std of 1; from a normal dis and how non norm would it be by chance?
hist(x)
#list of integers 1 through 99.
y = c(1:99) # Array of 1 - 99;
#z-scores of dataset of 99 values if perfectly normally distributed
normy = qnorm(y/100) # take the noraml distrubtion and see what the area under teh curve is doing for different values; what should be teh vvalue to distribute to separate the lowest 1/100th, then 2/100th, etc.
# For visual -> google statkey -> normal -> gives normal curve with mean 0, std of 1; then -> Left tail button > will give propostion of area under tail curve > Change that to 1/100th > should have a zscore (how many std the thing is below or aove teh mean) ; if it's perfectly normal then it would be -2.054 for a 2/100th; qq line is telling you what would a perfect dirsticbution look like and are tehre differences with your current set
plot(x~normy)
abline(0,1)
x <- rnorm(54,0,18,26)
qqnorm(x)
x <- rnorm(54,0,18,26)
qqnorm(x)
qqline(x)
x <- rnorm(54,0,18,26)
qqnorm(x)
qqline(x)
x <- rnorm(54,0,18,26)
qqnorm(x)
qqline(x)
#### Generate random values that look like our data ####
# Summary of teh data we chose; shows that the residual stad error = 18.26
#rnom = takes teh sample of randomly sampled values and we will take 54, which is teh same sides as teh domestic dataset; then use the residual stad error
x <- rnorm(54,0,18.26)
qqnorm(x)
qqline(x)
#### Generate random values that look like our data ####
# Summary of teh data we chose; shows that the residual stad error = 18.26
#rnom = takes teh sample of randomly sampled values and we will take 54, which is teh same sides as teh domestic dataset; then use the residual stad error
x <- rnorm(54,0,18.26)
qqnorm(x)
qqline(x)
library(readr)
library(Stat2Data)
#### Class Notes ####
The quick brown fox
# message=FALSE, warning=FALSE suppress warnings and messages from appearing in knitted files
library(readr)
library(Stat2Data)
# message=FALSE, warning=FALSE suppress warnings and messages from appearing in knitted files
library(readr)
library(Stat2Data)
data("SpeciesArea")
plot(Species~Area, data=SpeciesArea)
SpeciesModel=lm(Species~Area, data=SpeciesArea)
abline(SpeciesModel)
plot(SpeciesModel$residuals~SpeciesModel$fitted.values)
abline(0,0)
head(Planets, 9)
# message=FALSE, warning=FALSE suppress warnings and messages from appearing in knitted files
library(readr)
library(Stat2Data)
Planets <- read_csv("https://raw.githubusercontent.com/JA-McLean/STOR455/master/data//Planets.csv")
head(Planets)
plot(Year~Distance, data = Planets)
# Looks less linear as you go further out planets
# Build linear model to see how fit
mod2 <- lm(Year~Distance, data=Planets)# This line min this square of errors, not good, but fits critera
abline(mod2)
plot(Year~Distance, data = Planets)
# Looks less linear as you go further out planets
# Build linear model to see how fit
mod2 <- lm(Year~Distance, data=Planets)# This line min this square of errors, not good, but fits critera
abline(mod2)
qqnorm(mod2$residuals) # IF these were perfectly dist, what line would they follow?
qqline(mod2$residuals)
qqnorm(mod2$residuals) # IF these were perfectly dist, what line would they follow? THat's what this shows
qqline(mod2$residuals)
plot(mod2$residuals~mod2$fitted.values)
abline(0,0)
plot(mod2)# Plot does a lot of things; if you input a linear model, it will do a diadnoistc plot of the linear model
# Does 4-5 plots to see what the data looks like; it gives you different plots
# We can jsut make teh first two because we only want to see teh first two
# YOu can tell R to give you only two; so:
plot(mod2, 1:2)
#### Log ear, and keep dis the same ####
plot(log(Year)~Distance, Planets)
# log = base e, natural log; this really doesnt look more linear, so it's not the route we want to go; lets try something new
plot(Year~log(Distance), Planets)
# Better, but pretty much the inverse of what we wanted;
plot(log(Year)~log(Distance), Planets)
par(mfrow= c(2,2))
#### Log ear, and keep dis the same ####
par(mfrow= c(2,2))
#### Log ear, and keep dis the same ####
par(mfrow= c(2,2))
plot(log(Year)~Distance, Planets)
# log = base e, natural log; this really doesnt look more linear, so it's not the route we want to go; lets try something new
plot(Year~log(Distance), Planets)
# Better, but pretty much the inverse of what we wanted;
plot(log(Year)~log(Distance), Planets)
# This looks much more like a line; so we will use this
# Transofmrations may help some, but hurt other conditionsl so you will haev to test it
plot(Year~Distance, Planets)
#### Log ear, and keep dis the same ####
par(mfrow= c(2,2)) # Tells R to spit out all the below plots together; you have to runt he whole code to get this
plot(Year~Distance, Planets)
plot(log(Year)~Distance, Planets)
# log = base e, natural log; this really doesnt look more linear, so it's not the route we want to go; lets try something new
plot(Year~log(Distance), Planets)
# Better, but pretty much the inverse of what we wanted;
plot(log(Year)~log(Distance), Planets)
# This looks much more like a line; so we will use this
# Transofmrations may help some, but hurt other conditionsl so you will haev to test it
#### Log year by Log distance
mod 3<- lm(log(YEar) ~ log(Distance), Planets)
#### Log year by Log distance
mod3 <- lm(log(YEar) ~ log(Distance), Planets)
#### Log year by Log distance
mod3 <- lm(log(Year) ~ log(Distance), Planets)
#### Log year by Log distance
mod3 <- lm(log(Year) ~ log(Distance), Planets)
plot(log(Year)~log(Distance), Planets)
abline(mod3)
plot(mod3, 1:2)
mod3 # Where we get the below numebrs
log(Year) =  -0.0034399 + 1.5020611*log(Distance)
log(Year) =  -0.0034399 + 1.5020611*log(Planets$Distance)
log(Planets$Year) =  -0.0034399 + 1.5020611*log(Planets$Distance)
exp(-0.0034399)
plot(Year~Distance, Planetes)
plot(Year~Distance, Planets)
curve(0.9965*X^1.502061)# Give the line formula
curve(0.9965*X^1.502061, add = TRUE)# Give the line formula
```{r}
plot(Year~Distance, Planets) # THis isn't a line anymore; so we can use teh fucntion "curve" which will put al in eon any data
curve(0.9965*X^1.502061, add = TRUE)# Give the line formula
curve(0.9965*x^1.502061, add = TRUE)# Give the line formula
B0 = summary(mod3)$coefficients[1,1]
